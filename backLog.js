const readline = require('readline');
const fs = require('fs').promises;
const Question = require('./question');
const inquirer = require('inquirer');

// -----------------------------------------------------------------------------------------
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
async function processQuizFile(filePath) {
  try {
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const data = await fs.readFile(filePath, 'utf-8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = data.split('\n').map(line => line.trim()).filter(line => line !== '');

    const questions = [];
    const answers = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ, —á–µ—Ä–µ–¥—É—è –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    for (let i = 0; i < lines.length; i += 2) {
      const question = lines[i];
      const answer = lines[i + 1];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∞—Å—Å–∏–≤—ã
      questions.push(question);
      answers.push(answer);
    }

    return { questions, answers };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
  }
}
// -----------------------------------------------------------------------------------------
// –ö–ª–∞—Å—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
class Question {
  constructor(text, correctAnswer) {
    this.text = text;
    this.correctAnswer = correctAnswer.toLowerCase(); // –û–∂–∏–¥–∞–µ—Ç—Å—è "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  checkAnswer(userAnswer) {
    return userAnswer.trim().toLowerCase() === this.correctAnswer;
  }
}
// -----------------------------------------------------------------------------------------
// –ö–ª–∞—Å—Å –¥–ª—è –∫–≤–∏–∑–∞
class Quiz {
  constructor(questions) {
    this.questions = questions;
    this.score = 0;
    this.currentQuestionIndex = 0;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  // –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞
  start() {
    console.log("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑! –û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.");
    this.askNextQuestion();
  }

  // –ó–∞–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  askNextQuestion() {
    if (this.currentQuestionIndex < this.questions.length) {
      const currentQuestion = this.questions[this.currentQuestionIndex];
      this.rl.question(currentQuestion.text + ' ', (answer) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (currentQuestion.checkAnswer(answer)) {
          console.log('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëçüíÉüèª');
          this.score++;
        } else {
          console.log('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! üí©');
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        this.currentQuestionIndex++;
        this.askNextQuestion();
      });
    } else {
      // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
      this.endQuiz();
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
  endQuiz() {
    console.log(`–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.score} –∏–∑ ${this.questions.length}`);
    this.rl.close();
  }
}
// -----------------------------------------------------------------------------------------
// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ Question –∏ –∑–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞
async function runQuiz() {
  const directoryPath = './topics';
  const files = await fs.readdir(directoryPath);

  const fileChoices = files.map((file) => ({ name: file, value: file }));

 
 const userChose = await inquirer
    .prompt([
       {
        type: 'list',
        name: 'file',
        message: '–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞:',
        choices: fileChoices,
      },
    ])

  const { questions, answers } = await processQuizFile(`./topics/${userChose.file}`);

  if (!questions || !answers || questions.length !== answers.length) {
    console.error('–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –ø—Ä–æ—á–∏—Ç–∞–Ω.');
    return;
  }

  const questionObjects = [];

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Question
  for (let i = 0; i < questions.length; i++) {
    const question = new Question(questions[i], answers[i]);
    questionObjects.push(question);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
  const quiz = new Quiz(questionObjects);
  quiz.start();
}
// -----------------------------------------------------------------------------------------
// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
runQuiz();
